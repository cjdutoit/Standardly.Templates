using System.Threading.Tasks;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using $rootnamespace$.$models$.$safeItemNamePlural$.Exceptions;
using Xeptions;

namespace $rootnamespace$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$Service
    {
        private delegate ValueTask<$safeItemNameSingular$> Returning$safeItemNameSingular$Function();

        private async ValueTask<$safeItemNameSingular$> TryCatch(Returning$safeItemNameSingular$Function returning$safeItemNameSingular$Function)
        {
            try
            {
                return await returning$safeItemNameSingular$Function();
            }
            catch (Null$safeItemNameSingular$Exception null$safeItemNameSingular$Exception)
            {
                throw CreateAndLogValidationException(null$safeItemNameSingular$Exception);
            }
            catch (Invalid$safeItemNameSingular$Exception invalid$safeItemNameSingular$Exception)
            {
                throw CreateAndLogValidationException(invalid$safeItemNameSingular$Exception);
            }
        }

        private $safeItemNameSingular$ValidationException CreateAndLogValidationException(Xeption exception)
        {
            var $parameterSafeItemNameSingular$ValidationException =
                new $safeItemNameSingular$ValidationException(exception);

            this.loggingBroker.LogError($parameterSafeItemNameSingular$ValidationException);

            return $parameterSafeItemNameSingular$ValidationException;
        }
    }
}