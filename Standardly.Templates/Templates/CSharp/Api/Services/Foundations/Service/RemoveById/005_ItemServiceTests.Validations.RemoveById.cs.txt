using System;
using System.Threading.Tasks;
using FluentAssertions;
using Moq;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using $rootnamespace$.$models$.$safeItemNamePlural$.Exceptions;
using Xunit;

namespace $unitTestProjectName$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$ServiceTests
    {
        [Fact]
        public async Task ShouldThrowValidationExceptionOnRemoveIfIdIsInvalidAndLogItAsync()
        {
            // given
            Guid invalid$safeItemNameSingular$Id = Guid.Empty;

            var invalid$safeItemNameSingular$Exception =
                new Invalid$safeItemNameSingular$Exception();

            invalid$safeItemNameSingular$Exception.AddData(
                key: nameof($safeItemNameSingular$.Id),
                values: "Id is required");

            var expected$safeItemNameSingular$ValidationException =
                new $safeItemNameSingular$ValidationException(invalid$safeItemNameSingular$Exception);

            // when
            ValueTask<$safeItemNameSingular$> remove$safeItemNameSingular$ByIdTask =
                this.$parameterSafeItemNameSingular$Service.Remove$safeItemNameSingular$ByIdAsync(invalid$safeItemNameSingular$Id);

            $safeItemNameSingular$ValidationException actual$safeItemNameSingular$ValidationException =
                await Assert.ThrowsAsync<$safeItemNameSingular$ValidationException>(
                    remove$safeItemNameSingular$ByIdTask.AsTask);

            // then
            actual$safeItemNameSingular$ValidationException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$ValidationException);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogError(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$ValidationException))),
                        Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Delete$safeItemNameSingular$Async(It.IsAny<$safeItemNameSingular$>()),
                    Times.Never);

            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.storageBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }

        [Fact]
        public async Task ShouldThrowNotFoundExceptionOnRemoveIf$safeItemNameSingular$IsNotFoundAndLogItAsync()
        {
            // given
            Guid input$safeItemNameSingular$Id = Guid.NewGuid();
            $safeItemNameSingular$ no$safeItemNameSingular$ = null;

            var notFound$safeItemNameSingular$Exception =
                new NotFound$safeItemNameSingular$Exception(input$safeItemNameSingular$Id);

            var expected$safeItemNameSingular$ValidationException =
                new $safeItemNameSingular$ValidationException(notFound$safeItemNameSingular$Exception);

            this.storageBrokerMock.Setup(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(It.IsAny<Guid>()))
                    .ReturnsAsync(no$safeItemNameSingular$);

            // when
            ValueTask<$safeItemNameSingular$> remove$safeItemNameSingular$ByIdTask =
                this.$parameterSafeItemNameSingular$Service.Remove$safeItemNameSingular$ByIdAsync(input$safeItemNameSingular$Id);

            // then
            await Assert.ThrowsAsync<$safeItemNameSingular$ValidationException>(
               remove$safeItemNameSingular$ByIdTask.AsTask);

            this.storageBrokerMock.Verify(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(It.IsAny<Guid>()),
                    Times.Once);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogError(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$ValidationException))),
                        Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Delete$safeItemNameSingular$Async(It.IsAny<$safeItemNameSingular$>()),
                    Times.Never);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }
    }
}