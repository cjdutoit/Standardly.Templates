using System;
using System.Collections.Generic;
using System.Linq;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using $rootnamespace$.$models$.$safeItemNamePlural$.Exceptions;

namespace $rootnamespace$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$Service
    {
        private IEnumerable<(dynamic Rule, string Parameter)> SharedValidations($safeItemNameSingular$ $parameterSafeItemNameSingular$)
        {
            List<(dynamic Rule, string Parameter)> sharedValidations = 
                new List<(dynamic Rule, string Parameter)>{
                    (Rule: IsInvalid($parameterSafeItemNameSingular$.Id), Parameter: nameof($safeItemNameSingular$.Id)),

                    // TODO: Add any other shared structural validation rules 

                    (Rule: IsInvalid($parameterSafeItemNameSingular$.CreatedDate), Parameter: nameof($safeItemNameSingular$.CreatedDate)),
                    (Rule: IsInvalid($parameterSafeItemNameSingular$.CreatedByUserId), Parameter: nameof($safeItemNameSingular$.CreatedByUserId)),
                    (Rule: IsInvalid($parameterSafeItemNameSingular$.UpdatedDate), Parameter: nameof($safeItemNameSingular$.UpdatedDate)),
                    (Rule: IsInvalid($parameterSafeItemNameSingular$.UpdatedByUserId), Parameter: nameof($safeItemNameSingular$.UpdatedByUserId))
                };

            return sharedValidations;
        }
        
        private void Validate$safeItemNameSingular$OnAdd($safeItemNameSingular$ $parameterSafeItemNameSingular$)
        {
            Validate$safeItemNameSingular$IsNotNull($parameterSafeItemNameSingular$);

            Validate(
                SharedValidations($parameterSafeItemNameSingular$),

                (Rule: IsNotSame(
                    firstDate: $parameterSafeItemNameSingular$.UpdatedDate,
                    secondDate: $parameterSafeItemNameSingular$.CreatedDate,
                    secondDateName: nameof($safeItemNameSingular$.CreatedDate)),
                Parameter: nameof($safeItemNameSingular$.UpdatedDate)),

                (Rule: IsNotSame(
                    firstId: $parameterSafeItemNameSingular$.UpdatedByUserId,
                    secondId: $parameterSafeItemNameSingular$.CreatedByUserId,
                    secondIdName: nameof($safeItemNameSingular$.CreatedByUserId)),
                Parameter: nameof($safeItemNameSingular$.UpdatedByUserId)),

                (Rule: IsNotRecent($parameterSafeItemNameSingular$.CreatedDate), Parameter: nameof($safeItemNameSingular$.CreatedDate)));
        }

        private void Validate$safeItemNameSingular$OnModify($safeItemNameSingular$ $parameterSafeItemNameSingular$)
        {
            Validate$safeItemNameSingular$IsNotNull($parameterSafeItemNameSingular$);

            Validate(
                SharedValidations($parameterSafeItemNameSingular$),

                (Rule: IsSame(
                    firstDate: $parameterSafeItemNameSingular$.UpdatedDate,
                    secondDate: $parameterSafeItemNameSingular$.CreatedDate,
                    secondDateName: nameof($safeItemNameSingular$.CreatedDate)),
                Parameter: nameof($safeItemNameSingular$.UpdatedDate)),

                (Rule: IsNotRecent($parameterSafeItemNameSingular$.UpdatedDate), Parameter: nameof($parameterSafeItemNameSingular$.UpdatedDate)));
        }

        public void Validate$safeItemNameSingular$Id(Guid $parameterSafeItemNameSingular$Id) =>
            Validate((Rule: IsInvalid($parameterSafeItemNameSingular$Id), Parameter: nameof($safeItemNameSingular$.Id)));

        private static void ValidateStorage$safeItemNameSingular$($safeItemNameSingular$ maybe$safeItemNameSingular$, Guid $parameterSafeItemNameSingular$Id)
        {
            if (maybe$safeItemNameSingular$ is null)
            {
                throw new NotFound$safeItemNameSingular$Exception($parameterSafeItemNameSingular$Id);
            }
        }

        private static void Validate$safeItemNameSingular$IsNotNull($safeItemNameSingular$ $parameterSafeItemNameSingular$)
        {
            if ($parameterSafeItemNameSingular$ is null)
            {
                throw new Null$safeItemNameSingular$Exception();
            }
        }

        private static dynamic IsInvalid(Guid id) => new
        {
            Condition = id == Guid.Empty,
            Message = "Id is required"
        };

        private static dynamic IsInvalid(string text) => new
        {
            Condition = String.IsNullOrWhiteSpace(text),
            Message = "Text is required"
        };

        private static dynamic IsInvalid(DateTimeOffset date) => new
        {
            Condition = date == default,
            Message = "Date is required"
        };

        private static dynamic IsSame(
            DateTimeOffset firstDate,
            DateTimeOffset secondDate,
            string secondDateName) => new
            {
                Condition = firstDate == secondDate,
                Message = $"Date is the same as {secondDateName}"
            };

        private static dynamic IsNotSame(
            DateTimeOffset firstDate,
            DateTimeOffset secondDate,
            string secondDateName) => new
            {
                Condition = firstDate != secondDate,
                Message = $"Date is not the same as {secondDateName}"
            };

        private static dynamic IsNotSame(
            Guid firstId,
            Guid secondId,
            string secondIdName) => new
            {
                Condition = firstId != secondId,
                Message = $"Id is not the same as {secondIdName}"
            };

        private dynamic IsNotRecent(DateTimeOffset date) => new
        {
            Condition = IsDateNotRecent(date),
            Message = "Date is not recent"
        };

        private bool IsDateNotRecent(DateTimeOffset date)
        {
            DateTimeOffset currentDateTime = this.dateTimeBroker.GetCurrentDateTimeOffset();
            TimeSpan timeDifference = currentDateTime.Subtract(date);

            return timeDifference.TotalSeconds is > 60 or < 0;
        }

        private static void Validate(
            IEnumerable<(dynamic Rule, string Parameter)> sharedValidations,
            params (dynamic Rule, string Parameter)[] validations)
        {
            List<(dynamic Rule, string Parameter)> allValidations = new List<(dynamic Rule, string Parameter)>();
            allValidations.AddRange(sharedValidations);
            allValidations.AddRange(validations);

            Validate(allValidations.ToArray());
        }
        
        private static void Validate(params (dynamic Rule, string Parameter)[] validations)
        {
            var invalid$safeItemNameSingular$Exception = new Invalid$safeItemNameSingular$Exception();

            foreach ((dynamic rule, string parameter) in validations)
            {
                if (rule.Condition)
                {
                    invalid$safeItemNameSingular$Exception.UpsertDataList(
                        key: parameter,
                        value: rule.Message);
                }
            }

            invalid$safeItemNameSingular$Exception.ThrowIfContainsErrors();
        }
    }
}