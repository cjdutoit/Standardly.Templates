using System;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Moq;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using $rootnamespace$.$models$.$safeItemNamePlural$.Exceptions;
using Xunit;

namespace $unitTestProjectName$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$ServiceTests
    {
        [Fact]
        public async Task ShouldThrowCriticalDependencyExceptionOnRetrieveByIdIfSqlErrorOccursAndLogItAsync()
        {
            // given
            Guid someId = Guid.NewGuid();
            SqlException sqlException = GetSqlException();

            var failed$safeItemNameSingular$StorageException =
                new Failed$safeItemNameSingular$StorageException(sqlException);

            var expected$safeItemNameSingular$DependencyException =
                new $safeItemNameSingular$DependencyException(failed$safeItemNameSingular$StorageException);

            this.storageBrokerMock.Setup(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(It.IsAny<Guid>()))
                    .ThrowsAsync(sqlException);

            // when
            ValueTask<$safeItemNameSingular$> retrieve$safeItemNameSingular$ByIdTask =
                this.$parameterSafeItemNameSingular$Service.Retrieve$safeItemNameSingular$ByIdAsync(someId);

            $safeItemNameSingular$DependencyException actual$safeItemNameSingular$DependencyException =
                await Assert.ThrowsAsync<$safeItemNameSingular$DependencyException>(
                    retrieve$safeItemNameSingular$ByIdTask.AsTask);

            // then
            actual$safeItemNameSingular$DependencyException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$DependencyException);

            this.storageBrokerMock.Verify(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(It.IsAny<Guid>()),
                    Times.Once);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogCritical(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$DependencyException))),
                        Times.Once);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }

        [Fact]
        public async Task ShouldThrowServiceExceptionOnRetrieveByIdIfServiceErrorOccursAndLogItAsync()
        {
            // given
            Guid someId = Guid.NewGuid();
            var serviceException = new Exception();

            var failed$safeItemNameSingular$ServiceException =
                new Failed$safeItemNameSingular$ServiceException(serviceException);

            var expected$safeItemNameSingular$ServiceException =
                new $safeItemNameSingular$ServiceException(failed$safeItemNameSingular$ServiceException);

            this.storageBrokerMock.Setup(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(It.IsAny<Guid>()))
                    .ThrowsAsync(serviceException);

            // when
            ValueTask<$safeItemNameSingular$> retrieve$safeItemNameSingular$ByIdTask =
                this.$parameterSafeItemNameSingular$Service.Retrieve$safeItemNameSingular$ByIdAsync(someId);

            $safeItemNameSingular$ServiceException actual$safeItemNameSingular$ServiceException =
                await Assert.ThrowsAsync<$safeItemNameSingular$ServiceException>(
                    retrieve$safeItemNameSingular$ByIdTask.AsTask);

            // then
            actual$safeItemNameSingular$ServiceException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$ServiceException);

            this.storageBrokerMock.Verify(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(It.IsAny<Guid>()),
                    Times.Once);

            this.loggingBrokerMock.Verify(broker =>
               broker.LogError(It.Is(SameExceptionAs(
                   expected$safeItemNameSingular$ServiceException))),
                        Times.Once);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }
    }
}