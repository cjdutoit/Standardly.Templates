{
  "name": "FOUNDATIONS: Service",
  "description": "Generates a service",
  "templateType": "API",
  "projectsRequired": "Api,Unit",
  "sortOrder": 2,
  "tasks": [
    {
      "name": "FOUNDATIONS: $safeItemNameSingular$ Service - Add $safeItemNameSingular$",
      "branchName": "foundations-$parameterSafeItemNamePluralLower$-add",
      "actions": [
        {
          "name": "Create branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Checkout base branch",
              "instruction": "git checkout $previousBranch$"
            },
            {
              "name": "Fetch the latest code",
              "instruction": "git fetch origin"
            },
            {
              "name": "Create new branch",
              "instruction": "git checkout -b users/$username$/$currentBranch$ users/$username$/$previousBranch$"
            },
            {
              "name": "Change folder",
              "instruction": "cd /d \"$unitTestProjectFolder$\""
            },
            {
              "name": "Install DeepCloner from NuGet",
              "instruction": "dotnet add $unitTestProjectFile$ package DeepCloner"
            },
            {
              "name": "Install FluentAssertions from NuGet",
              "instruction": "dotnet add $unitTestProjectFile$ package FluentAssertions"
            },
            {
              "name": "Install Moq from NuGet",
              "instruction": "dotnet add $unitTestProjectFile$ package Moq"
            },
            {
              "name": "Install Tynamix.ObjectFiller from NuGet",
              "instruction": "dotnet add $unitTestProjectFile$ package Tynamix.ObjectFiller"
            },
            {
              "name": "Install Xeption from NuGet",
              "instruction": "dotnet add $unitTestProjectFile$ package Xeption"
            },
            {
              "name": "Change folder",
              "instruction": "cd /d \"$projectFolder$\""
            }
          ]
        },
        {
          "name": "001 - ShouldAdd$safeItemNameSingular$Async -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\001_ItemServiceTests.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\001_ItemServiceTests.Logic.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Logic.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\001_IItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\I$safeItemNameSingular$Service.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\001_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],

          "appends": [
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "private static void AddBrokers(IServiceCollection services)",
              "regexToMatchForAppend": "(?<=public class Startup\\r\\n    \\{\\r\\n)([\\S\\s]*?)(?=\\r\\n    \\}\\r\\n)",
              "contentToAppend": "\r\n\r\n        private static void AddBrokers(IServiceCollection services)\r\n        {\r\n        }",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "private static void AddFoundations(IServiceCollection services)",
              "regexToMatchForAppend": "(?<=public class Startup\\r\\n    \\{\\r\\n)([\\S\\s]*?)(?=\\r\\n    \\}\\r\\n)",
              "contentToAppend": "\r\n\r\n        private static void AddFoundations(IServiceCollection services)\r\n        {\r\n        }",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "private static void AddProcessings(IServiceCollection services)",
              "regexToMatchForAppend": "(?<=public class Startup\\r\\n    \\{\\r\\n)([\\S\\s]*?)(?=\\r\\n    \\}\\r\\n)",
              "contentToAppend": "\r\n\r\n        private static void AddProcessings(IServiceCollection services)\r\n        {\r\n        }",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "private static void AddOrchestrations(IServiceCollection services)",
              "regexToMatchForAppend": "(?<=public class Startup\\r\\n    \\{\\r\\n)([\\S\\s]*?)(?=\\r\\n    \\}\\r\\n)",
              "contentToAppend": "\r\n\r\n        private static void AddOrchestrations(IServiceCollection services)\r\n        {\r\n        }",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=public void ConfigureServices\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=\\n        \\}\\r\\n)",
              "contentToAppend": "            AddOrchestrations(services);\r\n",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=public void ConfigureServices\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=\\n        \\}\\r\\n)",
              "contentToAppend": "            AddProcessings(services);\r\n",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=public void ConfigureServices\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=\\n        \\}\\r\\n)",
              "contentToAppend": "            AddFoundations(services);\r\n",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=public void ConfigureServices\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=\\n        \\}\\r\\n)",
              "contentToAppend": "            AddBrokers(services);\r\n",
              "appendToBeginning": true,
              "appendEvenIfContentAlreadyExist": false
            },
            {
              "target": "$projectFolder$\\Startup.cs",
              "doesNotContainContent": "",
              "regexToMatchForAppend": "(?<=private static void AddFoundations\\(IServiceCollection services\\)\\r\\n        \\{\\r\\n)([\\S\\s]*?)(?=        \\}\\r\\n)",
              "contentToAppend": "            services.AddTransient<I$safeItemNameSingular$Service.cs, $safeItemNameSingular$Service.cs>();\r\n",
              "appendToBeginning": false,
              "appendEvenIfContentAlreadyExist": false
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldAdd$safeItemNameSingular$Async -> FAIL\""
            }
          ]
        },
        {
          "name": "002 - ShouldAdd$safeItemNameSingular$Async -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\002_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldAdd$safeItemNameSingular$Async -> PASS\""
            }
          ]
        },
        {
          "name": "003 - ShouldThrowValidationExceptionOnAddIf$safeItemNameSingular$IsNullAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\003_ItemServiceTests.Validations.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\003_ItemServiceTests.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\003_NullItemException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\Null$safeItemNameSingular$Exception.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\003_ItemValidationException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\$safeItemNameSingular$ValidationException.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIf$safeItemNameSingular$IsNullAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "004 - ShouldThrowValidationExceptionOnAddIf$safeItemNameSingular$IsNullAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\004_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\004_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\004_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIf$safeItemNameSingular$IsNullAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "005 - ShouldThrowValidationExceptionOnAddIf$safeItemNameSingular$IsInvalidAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\005_ItemServiceTests.Validations.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\005_InvalidItemException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\Invalid$safeItemNameSingular$Exception.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIf$safeItemNameSingular$IsInvalidAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "006 - ShouldThrowValidationExceptionOnAddIf$safeItemNameSingular$IsInvalidAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\006_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\006_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIf$safeItemNameSingular$IsInvalidAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "007 - ShouldThrowValidationExceptionOnAddIfCreateAndUpdateDatesIsNotSameAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\007_ItemServiceTests.Validations.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\007_ItemServiceTests.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIfCreateAndUpdateDatesIsNotSameAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "008 - ShouldThrowValidationExceptionOnAddIfCreateAndUpdateDatesIsNotSameAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\008_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIfCreateAndUpdateDatesIsNotSameAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "009 - ShouldThrowValidationExceptionOnAddIfCreateAndUpdateUserIdsIsNotSameAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\009_ItemServiceTests.Validations.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Add.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIfCreateAndUpdateUserIdsIsNotSameAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "010 - ShouldThrowValidationExceptionOnAddIfCreateAndUpdateUserIdsIsNotSameAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\010_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIfCreateAndUpdateUserIdsIsNotSameAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "011 - ShouldThrowValidationExceptionOnAddIfCreatedDateIsNotRecentAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\011_ItemServiceTests.Validations.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\011_ItemServiceTests.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIfCreatedDateIsNotRecentAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "012 - ShouldThrowValidationExceptionOnAddIfCreatedDateIsNotRecentAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\012_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\012_ItemServiceTests.Validations.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\012_ItemServiceTests.Logic.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Logic.Add.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIfCreatedDateIsNotRecentAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "013 - ShouldThrowCriticalDependencyExceptionOnAddIfSqlErrorOccursAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\013_ItemServiceTests.Exceptions.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\013_ItemServiceTests.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\013_FailedItemStorageException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\Failed$safeItemNameSingular$StorageException.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\013_ItemDependencyException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\$safeItemNameSingular$DependencyException.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowCriticalDependencyExceptionOnAddIfSqlErrorOccursAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "014 - ShouldThrowCriticalDependencyExceptionOnAddIfSqlErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\014_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowCriticalDependencyExceptionOnAddIfSqlErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "015 - ShouldThrowDependencyValidationExceptionOnAddIf$safeItemNameSingular$AlreadyExsitsAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\015_ItemServiceTests.Exceptions.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\015_ItemServiceTests.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\015_AlreadyExistsItemException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\AlreadyExists$safeItemNameSingular$Exception.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\015_ItemDependencyValidationException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\$safeItemNameSingular$DependencyValidationException.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyValidationExceptionOnAddIf$safeItemNameSingular$AlreadyExsitsAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "016 - ShouldThrowDependencyValidationExceptionOnAddIf$safeItemNameSingular$AlreadyExsitsAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\016_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyValidationExceptionOnAddIf$safeItemNameSingular$AlreadyExsitsAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "017 - ShouldThrowValidationExceptionOnAddIfReferenceErrorOccursAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\017_ItemServiceTests.Exceptions.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\017_InvalidItemReferenceException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\Invalid$safeItemNameSingular$ReferenceException.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIfReferenceErrorOccursAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "018 - ShouldThrowValidationExceptionOnAddIfReferenceErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\018_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnAddIfReferenceErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "019 - ShouldThrowDependencyExceptionOnAddIfDatabaseUpdateErrorOccursAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\019_ItemServiceTests.Exceptions.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Add.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyExceptionOnAddIfDatabaseUpdateErrorOccursAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "020 - ShouldThrowDependencyExceptionOnAddIfDatabaseUpdateErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\020_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyExceptionOnAddIfDatabaseUpdateErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "021 - ShouldThrowServiceExceptionOnAddIfServiceErrorOccursAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\021_ItemServiceTests.Exceptions.Add.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Add.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\021_FailedItemServiceException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\Failed$safeItemNameSingular$ServiceException.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\021_ItemServiceException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\$safeItemNameSingular$ServiceException.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowServiceExceptionOnAddIfServiceErrorOccursAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "022 - ShouldThrowServiceExceptionOnAddIfServiceErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Add\\022_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowServiceExceptionOnAddIfServiceErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "Push branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Push changes to <remote>",
              "instruction": "git push origin users/$username$/$currentBranch$"
            }
          ]
        },
        {
          "name": "Create Pull Request",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create Pull Request",
              "instruction": "gh pr create $draftPullRequest$ -t \"FOUNDATIONS: $safeItemNameSingular$ Service - Add $safeItemNameSingular$\" -b \" \""
            }
          ]
        }
      ]
    },
    {
      "name": "FOUNDATIONS: $safeItemNameSingular$ Service - Retrieve All $safeItemNamePlural$",
      "branchName": "foundations-$parameterSafeItemNamePluralLower$-retrieveall",
      "actions": [
        {
          "name": "Create branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create new branch",
              "instruction": "git checkout -b users/$username$/$currentBranch$ users/$username$/$previousBranch$"
            }
          ]
        },
        {
          "name": "001 - ShouldReturn$safeItemNameSingular$ -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\001_ItemServiceTests.Logic.RetrieveAll.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Logic.RetrieveAll.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\001_ItemServiceTests.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\001_IItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\I$safeItemNameSingular$Service.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\001_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldReturn$safeItemNameSingular$ -> FAIL\""
            }
          ]
        },
        {
          "name": "002 - ShouldReturn$safeItemNameSingular$ -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\002_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldReturn$safeItemNameSingular$ -> PASS\""
            }
          ]
        },
        {
          "name": "003 - ShouldThrowCriticalDependencyExceptionOnRetrieveAllWhenSqlExceptionOccursAndLogIt -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\003_ItemServiceTests.Exceptions.RetrieveAll.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.RetrieveAll.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowCriticalDependencyExceptionOnRetrieveAllWhenSqlExceptionOccursAndLogIt -> FAIL\""
            }
          ]
        },
        {
          "name": "004 - ShouldThrowCriticalDependencyExceptionOnRetrieveAllWhenSqlExceptionOccursAndLogIt -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\004_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\004_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowCriticalDependencyExceptionOnRetrieveAllWhenSqlExceptionOccursAndLogIt -> PASS\""
            }
          ]
        },
        {
          "name": "005 - ShouldThrowServiceExceptionOnRetrieveAllIfServiceErrorOccursAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\005_ItemServiceTests.Exceptions.RetrieveAll.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.RetrieveAll.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowServiceExceptionOnRetrieveAllIfServiceErrorOccursAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "006 - ShouldThrowServiceExceptionOnRetrieveAllIfServiceErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveAll\\006_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowServiceExceptionOnRetrieveAllIfServiceErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "Push branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Push changes to <remote>",
              "instruction": "git push origin users/$username$/$currentBranch$"
            }
          ]
        },
        {
          "name": "Create Pull Request",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create Pull Request",
              "instruction": "gh pr create $draftPullRequest$ -t \"FOUNDATIONS: $safeItemNameSingular$ Service - Retrieve All $safeItemNamePlural$\" -b \" \""
            }
          ]
        }
      ]
    },
    {
      "name": "FOUNDATIONS: $safeItemNameSingular$ Service - Retrieve $safeItemNameSingular$ By Id",
      "branchName": "foundations-$parameterSafeItemNamePluralLower$-retrievebyid",
      "actions": [
        {
          "name": "Create branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create new branch",
              "instruction": "git checkout -b users/$username$/$currentBranch$ users/$username$/$previousBranch$"
            }
          ]
        },
        {
          "name": "001 - ShouldRetrieve$safeItemNameSingular$ByIdAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\001_ItemServiceTests.Logic.RetrieveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Logic.RetrieveById.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\001_IItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\I$safeItemNameSingular$Service.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\001_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldRetrieve$safeItemNameSingular$ByIdAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "002 - ShouldRetrieve$safeItemNameSingular$ByIdAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\002_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldRetrieve$safeItemNameSingular$ByIdAsync -> PASS\""
            }
          ]
        },
        {
          "name": "003 - ShouldThrowValidationExceptionOnRetrieveByIdIfIdIsInvalidAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\003_ItemServiceTests.Validations.RetrieveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.RetrieveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnRetrieveByIdIfIdIsInvalidAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "004 - ShouldThrowValidationExceptionOnRetrieveByIdIfIdIsInvalidAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\004_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\004_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnRetrieveByIdIfIdIsInvalidAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "005 - ShouldThrowNotFoundExceptionOnRetrieveByIdIf$safeItemNameSingular$IsNotFoundAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\005_ItemServiceTests.Validations.RetrieveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.RetrieveById.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\005_NotFoundItemException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\NotFound$safeItemNameSingular$Exception.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowNotFoundExceptionOnRetrieveByIdIf$safeItemNameSingular$IsNotFoundAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "006 - ShouldThrowNotFoundExceptionOnRetrieveByIdIf$safeItemNameSingular$IsNotFoundAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\006_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\006_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\006_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowNotFoundExceptionOnRetrieveByIdIf$safeItemNameSingular$IsNotFoundAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "007 - ShouldThrowCriticalDependencyExceptionOnRetrieveByIdIfSqlErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\007_ItemServiceTests.Exceptions.RetrieveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.RetrieveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowCriticalDependencyExceptionOnRetrieveByIdIfSqlErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "008 - ShouldThrowCriticalDependencyExceptionOnRetrieveByIdIfSqlErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RetrieveById\\008_ItemServiceTests.Exceptions.RetrieveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.RetrieveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowCriticalDependencyExceptionOnRetrieveByIdIfSqlErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "Push branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Push changes to <remote>",
              "instruction": "git push origin users/$username$/$currentBranch$"
            }
          ]
        },
        {
          "name": "Create Pull Request",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create Pull Request",
              "instruction": "gh pr create $draftPullRequest$ -t \"FOUNDATIONS: $safeItemNameSingular$ Service - Retrieve $safeItemNameSingular$ By Id\" -b \" \""
            }
          ]
        }
      ]
    },
    {
      "name": "FOUNDATIONS: $safeItemNameSingular$ Service - Modify $safeItemNameSingular$",
      "branchName": "foundations-$parameterSafeItemNamePluralLower$-modify",
      "actions": [
        {
          "name": "Create branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create new branch",
              "instruction": "git checkout -b users/$username$/$currentBranch$ users/$username$/$previousBranch$"
            }
          ]
        },
        {
          "name": "001 - ShouldModify$safeItemNameSingular$Async -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\001_ItemServiceTests.Logic.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Logic.Modify.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\001_ItemServiceTests.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\001_IItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\I$safeItemNameSingular$Service.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\001_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldModify$safeItemNameSingular$Async -> FAIL\""
            }
          ]
        },
        {
          "name": "002 - ShouldModify$safeItemNameSingular$Async -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\002_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldModify$safeItemNameSingular$Async -> PASS\""
            }
          ]
        },
        {
          "name": "003 - ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$IsNullAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\003_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$IsNullAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "004 - ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$IsNullAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\004_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\004_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$IsNullAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "005 - ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$IsInvalidAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\005_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$IsInvalidAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "006 - ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$IsInvalidAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\006_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$IsInvalidAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "007 - ShouldThrowValidationExceptionOnModifyIfUpdatedDateIsSameAsCreatedDateAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\007_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfUpdatedDateIsSameAsCreatedDateAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "008 - ShouldThrowValidationExceptionOnModifyIfUpdatedDateIsSameAsCreatedDateAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\008_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\008_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfUpdatedDateIsSameAsCreatedDateAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "009 - ShouldThrowValidationExceptionOnModifyIfUpdatedDateIsNotRecentAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\009_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfUpdatedDateIsNotRecentAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "010 - ShouldThrowValidationExceptionOnModifyIfUpdatedDateIsNotRecentAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\010_ItemServiceTests.Logic.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Logic.Modify.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\010_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\010_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfUpdatedDateIsNotRecentAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "011 - ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$DoesNotExistAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\011_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$DoesNotExistAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "012 - ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$DoesNotExistAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\012_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\012_ItemServiceTests.Logic.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Logic.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIf$safeItemNameSingular$DoesNotExistAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "013 - ShouldThrowValidationExceptionOnModifyIfStorageCreatedDateNotSameAsCreatedDateAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\013_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfStorageCreatedDateNotSameAsCreatedDateAndLogItAsyncs -> FAIL\""
            }
          ]
        },
        {
          "name": "014 - ShouldThrowValidationExceptionOnModifyIfStorageCreatedDateNotSameAsCreatedDateAndLogItAsyncs -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\014_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\014_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfStorageCreatedDateNotSameAsCreatedDateAndLogItAsyncs -> PASS\""
            }
          ]
        },
        {
          "name": "015 - ShouldThrowValidationExceptionOnModifyIfCreatedUserIdDontMacthStorageAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\015_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfCreatedUserIdDontMacthStorageAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "016 - ShouldThrowValidationExceptionOnModifyIfCreatedUserIdDontMacthStorageAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\016_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfCreatedUserIdDontMacthStorageAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "017 - ShouldThrowValidationExceptionOnModifyIfStorageUpdatedDateSameAsUpdatedDateAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\017_ItemServiceTests.Validations.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfStorageUpdatedDateSameAsUpdatedDateAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "018 - ShouldThrowValidationExceptionOnModifyIfStorageUpdatedDateSameAsUpdatedDateAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\018_ItemService.Validations.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Validations.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfStorageUpdatedDateSameAsUpdatedDateAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "019 - ShouldThrowCriticalDependencyExceptionOnModifyIfSqlErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\019_ItemServiceTests.Exceptions.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowCriticalDependencyExceptionOnModifyIfSqlErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "020 - ShouldThrowValidationExceptionOnModifyIfReferenceErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\020_ItemServiceTests.Exceptions.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfReferenceErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "021 - ShouldThrowDependencyExceptionOnModifyIfDatabaseUpdateExceptionOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\021_ItemServiceTests.Exceptions.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyExceptionOnModifyIfDatabaseUpdateExceptionOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "022 - ShouldThrowDependencyValidationExceptionOnModifyIfDatabaseUpdateConcurrencyErrorOccursAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\022_ItemServiceTests.Exceptions.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Modify.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\022_LockedItemException.cs.txt",
              "target": "$projectFolder$\\$models$\\$safeItemNamePlural$\\Exceptions\\Locked$safeItemNameSingular$Exception.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyValidationExceptionOnModifyIfDatabaseUpdateConcurrencyErrorOccursAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "023 - ShouldThrowDependencyValidationExceptionOnModifyIfDatabaseUpdateConcurrencyErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\023_ItemService.Exceptions.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.Exceptions.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyValidationExceptionOnModifyIfDatabaseUpdateConcurrencyErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "024 - ShouldThrowValidationExceptionOnModifyIfStorageUpdatedDateSameAsUpdatedDateAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\Modify\\024_ItemServiceTests.Exceptions.Modify.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.Modify.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnModifyIfStorageUpdatedDateSameAsUpdatedDateAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "Push branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Push changes to <remote>",
              "instruction": "git push origin users/$username$/$currentBranch$"
            }
          ]
        },
        {
          "name": "Create Pull Request",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create Pull Request",
              "instruction": "gh pr create $draftPullRequest$ -t \"FOUNDATIONS: $safeItemNameSingular$ Service - Modify $safeItemNameSingular$\" -b \" \""
            }
          ]
        }
      ]
    },
    {
      "name": "FOUNDATIONS: $safeItemNameSingular$ Service - Remove $safeItemNameSingular$ By Id",
      "branchName": "foundations-$parameterSafeItemNamePluralLower$-removebyid",
      "actions": [
        {
          "name": "Create branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create new branch",
              "instruction": "git checkout -b users/$username$/$currentBranch$ users/$username$/$previousBranch$"
            }
          ]
        },
        {
          "name": "001 - ShouldRemove$safeItemNameSingular$ByIdAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\001_ItemServiceTests.Logic.RemoveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Logic.RemoveById.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\001_IItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\I$safeItemNameSingular$Service.cs",
              "replace": true
            },
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\001_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldRemove$safeItemNameSingular$ByIdAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "002 - ShouldRemove$safeItemNameSingular$ByIdAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\002_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldRemove$safeItemNameSingular$ByIdAsync -> PASS\""
            }
          ]
        },
        {
          "name": "003 - ShouldThrowValidationExceptionOnRemoveIfIdIsInvalidAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\003_ItemServiceTests.Validations.RemoveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.RemoveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnRemoveIfIdIsInvalidAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "004 - ShouldThrowValidationExceptionOnRemoveIfIdIsInvalidAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\004_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnRemoveIfIdIsInvalidAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "005 - ShouldThrowNotFoundExceptionOnRemoveIf$safeItemNameSingular$IsNotFoundAndLogItAsync -> FAIL",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\003_ItemServiceTests.Validations.RemoveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Validations.RemoveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowValidationExceptionOnRemoveIfIdIsInvalidAndLogItAsync -> FAIL\""
            }
          ]
        },
        {
          "name": "006 - ShouldThrowNotFoundExceptionOnRemoveIf$safeItemNameSingular$IsNotFoundAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\006_ItemService.cs.txt",
              "target": "$projectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$Service.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowNotFoundExceptionOnRemoveIf$safeItemNameSingular$IsNotFoundAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "007 - ShouldThrowCriticalDependencyExceptionOnRemoveIfSqlErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\007_ItemServiceTests.Exceptions.RemoveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.RemoveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowCriticalDependencyExceptionOnRemoveIfSqlErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "008 - ShouldThrowDependencyValidationOnRemoveIfDatabaseUpdateConcurrencyErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\008_ItemServiceTests.Exceptions.RemoveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.RemoveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyValidationOnRemoveIfDatabaseUpdateConcurrencyErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "009 - ShouldThrowDependencyExceptionOnRemoveWhenSqlExceptionOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\009_ItemServiceTests.Exceptions.RemoveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.RemoveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowDependencyExceptionOnRemoveWhenSqlExceptionOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "010 - ShouldThrowServiceExceptionOnRemoveIfServiceErrorOccursAndLogItAsync -> PASS",
          "executionFolder": "$projectFolder$",
          "files": [
            {
              "template": "$templateFolder$\\CSharp\\Api\\Services\\Foundations\\Service\\RemoveById\\010_ItemServiceTests.Exceptions.RemoveById.cs.txt",
              "target": "$unitTestProjectFolder$\\$services$\\$foundations$\\$safeItemNamePlural$\\$safeItemNameSingular$ServiceTests.Exceptions.RemoveById.cs",
              "replace": true
            }
          ],
          "executions": [
            {
              "name": "Stage all changes",
              "instruction": "git add -A"
            },
            {
              "name": "Commit staged changes",
              "instruction": "git commit -m \"ShouldThrowServiceExceptionOnRemoveIfServiceErrorOccursAndLogItAsync -> PASS\""
            }
          ]
        },
        {
          "name": "Push branch",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Push changes to <remote>",
              "instruction": "git push origin users/$username$/$currentBranch$"
            }
          ]
        },
        {
          "name": "Create Pull Request",
          "executionFolder": "$projectFolder$",
          "executions": [
            {
              "name": "Create Pull Request",
              "instruction": "gh pr create $draftPullRequest$ -t \"FOUNDATIONS: $safeItemNameSingular$ Service - Remove $safeItemNameSingular$ By Id\" -b \" \""
            }
          ]
        }
      ]
    }
  ],
  "cleanupTasks": [
    "* FOUNDATIONS: $safeItemNameSingular$Service",
    "* ----------------------------------------------------",
    "* Add any additional validation rules required for your properties to the add unit test, commit a failing test, make it pass and commit and push the passing test. ",
    "* Add any additional validation rules required for your properties to the modify unit test, commit a failing test, make it pass and commit and push the passing test. ",
    "* Resolve / remove any TODO items in the task list",
    "* Link the pull request(s) to related issues by adding e.g. #CLOSES 123 to the description",
    "* Review Draft Pull Requests (and add more commits by pushing to any of the branches if needed):"
  ]
}