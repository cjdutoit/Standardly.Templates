using System.Linq;
using FluentAssertions;
using Moq;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using Xunit;

namespace $unitTestProjectName$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$ServiceTests
    {
        [Fact]
        public void ShouldReturn$safeItemNamePlural$()
        {
            // given
            IQueryable<$safeItemNameSingular$> random$safeItemNamePlural$ = CreateRandom$safeItemNamePlural$();
            IQueryable<$safeItemNameSingular$> storage$safeItemNamePlural$ = random$safeItemNamePlural$;
            IQueryable<$safeItemNameSingular$> expected$safeItemNamePlural$ = storage$safeItemNamePlural$;

            this.storageBrokerMock.Setup(broker =>
                broker.SelectAll$safeItemNamePlural$())
                    .Returns(storage$safeItemNamePlural$);

            // when
            IQueryable<$safeItemNameSingular$> actual$safeItemNamePlural$ =
                this.$parameterSafeItemNameSingular$Service.RetrieveAll$safeItemNamePlural$();

            // then
            actual$safeItemNamePlural$.Should().BeEquivalentTo(expected$safeItemNamePlural$);

            this.storageBrokerMock.Verify(broker =>
                broker.SelectAll$safeItemNamePlural$(),
                    Times.Once);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
        }
    }
}