using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using RESTFulSense.Controllers;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using $rootnamespace$.$models$.$safeItemNamePlural$.Exceptions;
using $rootnamespace$.$services$.$foundations$.$safeItemNamePlural$;

namespace $rootnamespace$.$controllers$
{
    [ApiController]
    [Route("api/[controller]")]
    public class $safeItemNamePlural$Controller : RESTFulController
    {
        private readonly I$safeItemNameSingular$Service $parameterSafeItemNameSingular$Service;

        public $safeItemNamePlural$Controller(I$safeItemNameSingular$Service $parameterSafeItemNameSingular$Service) =>
            this.$parameterSafeItemNameSingular$Service = $parameterSafeItemNameSingular$Service;

        [HttpPost]
        public async ValueTask<ActionResult<$safeItemNameSingular$>> Post$safeItemNameSingular$Async($safeItemNameSingular$ $parameterSafeItemNameSingular$)
        {
            try
            {
                $safeItemNameSingular$ added$safeItemNameSingular$ =
                    await this.$parameterSafeItemNameSingular$Service.Add$safeItemNameSingular$Async($parameterSafeItemNameSingular$);

                return Created(added$safeItemNameSingular$);
            }
            catch ($safeItemNameSingular$ValidationException $parameterSafeItemNameSingular$ValidationException)
            {
                return BadRequest($parameterSafeItemNameSingular$ValidationException.InnerException);
            }
            catch ($safeItemNameSingular$DependencyValidationException $parameterSafeItemNameSingular$ValidationException)
                when ($parameterSafeItemNameSingular$ValidationException.InnerException is Invalid$safeItemNameSingular$ReferenceException)
            {
                return FailedDependency($parameterSafeItemNameSingular$ValidationException.InnerException);
            }
            catch ($safeItemNameSingular$DependencyValidationException $parameterSafeItemNameSingular$DependencyValidationException)
               when ($parameterSafeItemNameSingular$DependencyValidationException.InnerException is AlreadyExists$safeItemNameSingular$Exception)
            {
                return Conflict($parameterSafeItemNameSingular$DependencyValidationException.InnerException);
            }
            catch ($safeItemNameSingular$DependencyException $parameterSafeItemNameSingular$DependencyException)
            {
                return InternalServerError($parameterSafeItemNameSingular$DependencyException);
            }
            catch ($safeItemNameSingular$ServiceException $parameterSafeItemNameSingular$ServiceException)
            {
                return InternalServerError($parameterSafeItemNameSingular$ServiceException);
            }
        }

        [HttpGet]
        public ActionResult<IQueryable<$safeItemNameSingular$>> GetAll$safeItemNamePlural$()
        {
            try
            {
                IQueryable<$safeItemNameSingular$> retrieved$safeItemNamePlural$ =
                    this.$parameterSafeItemNameSingular$Service.RetrieveAll$safeItemNamePlural$();

                return Ok(retrieved$safeItemNamePlural$);
            }
            catch ($safeItemNameSingular$DependencyException $parameterSafeItemNameSingular$DependencyException)
            {
                return InternalServerError($parameterSafeItemNameSingular$DependencyException);
            }
            catch ($safeItemNameSingular$ServiceException $parameterSafeItemNameSingular$ServiceException)
            {
                return InternalServerError($parameterSafeItemNameSingular$ServiceException);
            }
        }

        [HttpGet("{$parameterSafeItemNameSingular$Id}")]
        public async ValueTask<ActionResult<$safeItemNameSingular$>> Get$safeItemNameSingular$ByIdAsync(Guid $parameterSafeItemNameSingular$Id)
        {
            try
            {
                $safeItemNameSingular$ $parameterSafeItemNameSingular$ = await this.$parameterSafeItemNameSingular$Service.Retrieve$safeItemNameSingular$ByIdAsync($parameterSafeItemNameSingular$Id);

                return Ok($parameterSafeItemNameSingular$);
            }
            catch ($safeItemNameSingular$ValidationException $parameterSafeItemNameSingular$ValidationException)
                when ($parameterSafeItemNameSingular$ValidationException.InnerException is NotFound$safeItemNameSingular$Exception)
            {
                return NotFound($parameterSafeItemNameSingular$ValidationException.InnerException);
            }
            catch ($safeItemNameSingular$ValidationException $parameterSafeItemNameSingular$ValidationException)
            {
                return BadRequest($parameterSafeItemNameSingular$ValidationException.InnerException);
            }
            catch ($safeItemNameSingular$DependencyException $parameterSafeItemNameSingular$DependencyException)
            {
                return InternalServerError($parameterSafeItemNameSingular$DependencyException);
            }
            catch ($safeItemNameSingular$ServiceException $parameterSafeItemNameSingular$ServiceException)
            {
                return InternalServerError($parameterSafeItemNameSingular$ServiceException);
            }
        }
    }
}