using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using $acceptanceTestProjectName$.$brokers$;
using $acceptanceTestProjectName$.$models$.$safeItemNamePlural$;
using Tynamix.ObjectFiller;
using Xunit;

namespace $acceptanceTestProjectName$.Apis.$safeItemNamePlural$
{
    [Collection(nameof(ApiTestCollection))]
    public partial class $safeItemNamePlural$ApiTests
    {
        private readonly ApiBroker apiBroker;

        public $safeItemNamePlural$ApiTests(ApiBroker apiBroker) =>
            this.apiBroker = apiBroker;

        private int GetRandomNumber() =>
            new IntRange(min: 2, max: 10).GetValue();

        private static DateTimeOffset GetRandomDateTime() =>
            new DateTimeRange(earliestDate: new DateTime()).GetValue();

        private static $safeItemNameSingular$ Update$safeItemNameSingular$WithRandomValues($safeItemNameSingular$ input$safeItemNameSingular$)
        {
            DateTimeOffset now = DateTimeOffset.UtcNow;
            var filler = new Filler<$safeItemNameSingular$>();

            filler.Setup()
                .OnProperty($parameterSafeItemNameSingular$ => $parameterSafeItemNameSingular$.Id).Use(input$safeItemNameSingular$.Id)
                .OnType<DateTimeOffset>().Use(GetRandomDateTime())
                .OnProperty($parameterSafeItemNameSingular$ => $parameterSafeItemNameSingular$.CreatedDate).Use(input$safeItemNameSingular$.CreatedDate)
                .OnProperty($parameterSafeItemNameSingular$ => $parameterSafeItemNameSingular$.CreatedByUserId).Use(input$safeItemNameSingular$.CreatedByUserId)
                .OnProperty($parameterSafeItemNameSingular$ => $parameterSafeItemNameSingular$.UpdatedDate).Use(now);

            return filler.Create();
        }

        private async ValueTask<$safeItemNameSingular$> PostRandom$safeItemNameSingular$Async()
        {
            $safeItemNameSingular$ random$safeItemNameSingular$ = CreateRandom$safeItemNameSingular$();
            await this.apiBroker.Post$safeItemNameSingular$Async(random$safeItemNameSingular$);

            return random$safeItemNameSingular$;
        }

        private async ValueTask<List<$safeItemNameSingular$>> PostRandom$safeItemNamePlural$Async()
        {
            int randomNumber = GetRandomNumber();
            var random$safeItemNamePlural$ = new List<$safeItemNameSingular$>();

            for (int i = 0; i < randomNumber; i++)
            {
                random$safeItemNamePlural$.Add(await PostRandom$safeItemNameSingular$Async());
            }

            return random$safeItemNamePlural$;
        }

        private static $safeItemNameSingular$ CreateRandom$safeItemNameSingular$() =>
            CreateRandom$safeItemNameSingular$Filler().Create();

        private static Filler<$safeItemNameSingular$> CreateRandom$safeItemNameSingular$Filler()
        {
            Guid userId = Guid.NewGuid();
            DateTime now = DateTime.UtcNow;
            var filler = new Filler<$safeItemNameSingular$>();

            filler.Setup()
                .OnType<DateTimeOffset>().Use(now)
                .OnProperty($parameterSafeItemNameSingular$ => $parameterSafeItemNameSingular$.CreatedDate).Use(now)
                .OnProperty($parameterSafeItemNameSingular$ => $parameterSafeItemNameSingular$.CreatedByUserId).Use(userId)
                .OnProperty($parameterSafeItemNameSingular$ => $parameterSafeItemNameSingular$.UpdatedDate).Use(now)
                .OnProperty($parameterSafeItemNameSingular$ => $parameterSafeItemNameSingular$.UpdatedByUserId).Use(userId);

            return filler;
        }
    }
}