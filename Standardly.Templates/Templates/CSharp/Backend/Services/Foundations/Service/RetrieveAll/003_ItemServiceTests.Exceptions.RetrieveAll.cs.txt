using System;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Moq;
using $rootnamespace$.$models$.$safeItemNamePlural$.Exceptions;
using Xunit;

namespace $unitTestProjectName$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$ServiceTests
    {
        [Fact]
        public void ShouldThrowCriticalDependencyExceptionOnRetrieveAllWhenSqlExceptionOccursAndLogIt()
        {
            // given
            SqlException sqlException = GetSqlException();

            var failedStorageException =
                new Failed$safeItemNameSingular$StorageException(sqlException);

            var expected$safeItemNameSingular$DependencyException =
                new $safeItemNameSingular$DependencyException(failedStorageException);

            this.storageBrokerMock.Setup(broker =>
                broker.SelectAll$safeItemNamePlural$())
                    .Throws(sqlException);

            // when
            Action retrieveAll$safeItemNamePlural$Action = () =>
                this.$parameterSafeItemNameSingular$Service.RetrieveAll$safeItemNamePlural$();

            $safeItemNameSingular$DependencyException actual$safeItemNameSingular$DependencyException =
                Assert.Throws<$safeItemNameSingular$DependencyException>(retrieveAll$safeItemNamePlural$Action);

            // then
            actual$safeItemNameSingular$DependencyException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$DependencyException);

            this.storageBrokerMock.Verify(broker =>
                broker.SelectAll$safeItemNamePlural$(),
                    Times.Once);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogCritical(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$DependencyException))),
                        Times.Once);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }
    }
}