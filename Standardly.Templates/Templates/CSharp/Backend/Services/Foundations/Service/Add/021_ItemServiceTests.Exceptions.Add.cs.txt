using System;
using System.Threading.Tasks;
using EFxceptions.Models.Exceptions;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Moq;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using $rootnamespace$.$models$.$safeItemNamePlural$.Exceptions;
using Xunit;

namespace $unitTestProjectName$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$ServiceTests
    {
        [Fact]
        public async Task ShouldThrowCriticalDependencyExceptionOnAddIfSqlErrorOccursAndLogItAsync()
        {
            // given
            $safeItemNameSingular$ some$safeItemNameSingular$ = CreateRandom$safeItemNameSingular$();
            SqlException sqlException = GetSqlException();

            var failed$safeItemNameSingular$StorageException =
                new Failed$safeItemNameSingular$StorageException(sqlException);

            var expected$safeItemNameSingular$DependencyException =
                new $safeItemNameSingular$DependencyException(failed$safeItemNameSingular$StorageException);

            this.dateTimeBrokerMock.Setup(broker =>
                broker.GetCurrentDateTimeOffset())
                    .Throws(sqlException);

            // when
            ValueTask<$safeItemNameSingular$> add$safeItemNameSingular$Task =
                this.$parameterSafeItemNameSingular$Service.Add$safeItemNameSingular$Async(some$safeItemNameSingular$);

            $safeItemNameSingular$DependencyException actual$safeItemNameSingular$DependencyException =
                await Assert.ThrowsAsync<$safeItemNameSingular$DependencyException>(
                    add$safeItemNameSingular$Task.AsTask);

            // then
            actual$safeItemNameSingular$DependencyException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$DependencyException);

            this.dateTimeBrokerMock.Verify(broker =>
                broker.GetCurrentDateTimeOffset(),
                    Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Insert$safeItemNameSingular$Async(It.IsAny<$safeItemNameSingular$>()),
                    Times.Never);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogCritical(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$DependencyException))),
                        Times.Once);

            this.dateTimeBrokerMock.VerifyNoOtherCalls();
            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
        }

        [Fact]
        public async Task ShouldThrowDependencyValidationExceptionOnAddIf$safeItemNameSingular$AlreadyExsitsAndLogItAsync()
        {
            // given
            $safeItemNameSingular$ random$safeItemNameSingular$ = CreateRandom$safeItemNameSingular$();
            $safeItemNameSingular$ alreadyExists$safeItemNameSingular$ = random$safeItemNameSingular$;
            string randomMessage = GetRandomMessage();

            var duplicateKeyException =
                new DuplicateKeyException(randomMessage);

            var alreadyExists$safeItemNameSingular$Exception =
                new AlreadyExists$safeItemNameSingular$Exception(duplicateKeyException);

            var expected$safeItemNameSingular$DependencyValidationException =
                new $safeItemNameSingular$DependencyValidationException(alreadyExists$safeItemNameSingular$Exception);

            this.dateTimeBrokerMock.Setup(broker =>
                broker.GetCurrentDateTimeOffset())
                    .Throws(duplicateKeyException);

            // when
            ValueTask<$safeItemNameSingular$> add$safeItemNameSingular$Task =
                this.$parameterSafeItemNameSingular$Service.Add$safeItemNameSingular$Async(alreadyExists$safeItemNameSingular$);

            // then
            $safeItemNameSingular$DependencyValidationException actual$safeItemNameSingular$DependencyValidationException =
                await Assert.ThrowsAsync<$safeItemNameSingular$DependencyValidationException>(
                    add$safeItemNameSingular$Task.AsTask);

            actual$safeItemNameSingular$DependencyValidationException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$DependencyValidationException);

            this.dateTimeBrokerMock.Verify(broker =>
                broker.GetCurrentDateTimeOffset(),
                    Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Insert$safeItemNameSingular$Async(It.IsAny<$safeItemNameSingular$>()),
                    Times.Never);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogError(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$DependencyValidationException))),
                        Times.Once);

            this.dateTimeBrokerMock.VerifyNoOtherCalls();
            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
        }

        [Fact]
        public async void ShouldThrowValidationExceptionOnAddIfReferenceErrorOccursAndLogItAsync()
        {
            // given
            $safeItemNameSingular$ some$safeItemNameSingular$ = CreateRandom$safeItemNameSingular$();
            string randomMessage = GetRandomMessage();
            string exceptionMessage = randomMessage;

            var foreignKeyConstraintConflictException =
                new ForeignKeyConstraintConflictException(exceptionMessage);

            var invalid$safeItemNameSingular$ReferenceException =
                new Invalid$safeItemNameSingular$ReferenceException(foreignKeyConstraintConflictException);

            var expected$safeItemNameSingular$ValidationException =
                new $safeItemNameSingular$DependencyValidationException(invalid$safeItemNameSingular$ReferenceException);

            this.dateTimeBrokerMock.Setup(broker =>
                broker.GetCurrentDateTimeOffset())
                    .Throws(foreignKeyConstraintConflictException);

            // when
            ValueTask<$safeItemNameSingular$> add$safeItemNameSingular$Task =
                this.$parameterSafeItemNameSingular$Service.Add$safeItemNameSingular$Async(some$safeItemNameSingular$);

            // then
            $safeItemNameSingular$DependencyValidationException actual$safeItemNameSingular$DependencyValidationException =
                await Assert.ThrowsAsync<$safeItemNameSingular$DependencyValidationException>(
                    add$safeItemNameSingular$Task.AsTask);

            actual$safeItemNameSingular$DependencyValidationException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$ValidationException);

            this.dateTimeBrokerMock.Verify(broker =>
                broker.GetCurrentDateTimeOffset(),
                    Times.Once());

            this.loggingBrokerMock.Verify(broker =>
                broker.LogError(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$ValidationException))),
                        Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Insert$safeItemNameSingular$Async(some$safeItemNameSingular$),
                    Times.Never());

            this.dateTimeBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.storageBrokerMock.VerifyNoOtherCalls();
        }

        [Fact]
        public async Task ShouldThrowDependencyExceptionOnAddIfDatabaseUpdateErrorOccursAndLogItAsync()
        {
            // given
            $safeItemNameSingular$ some$safeItemNameSingular$ = CreateRandom$safeItemNameSingular$();

            var databaseUpdateException =
                new DbUpdateException();

            var failed$safeItemNameSingular$StorageException =
                new Failed$safeItemNameSingular$StorageException(databaseUpdateException);

            var expected$safeItemNameSingular$DependencyException =
                new $safeItemNameSingular$DependencyException(failed$safeItemNameSingular$StorageException);

            this.dateTimeBrokerMock.Setup(broker =>
                broker.GetCurrentDateTimeOffset())
                    .Throws(databaseUpdateException);

            // when
            ValueTask<$safeItemNameSingular$> add$safeItemNameSingular$Task =
                this.$parameterSafeItemNameSingular$Service.Add$safeItemNameSingular$Async(some$safeItemNameSingular$);

            $safeItemNameSingular$DependencyException actual$safeItemNameSingular$DependencyException =
                await Assert.ThrowsAsync<$safeItemNameSingular$DependencyException>(
                    add$safeItemNameSingular$Task.AsTask);

            // then
            actual$safeItemNameSingular$DependencyException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$DependencyException);

            this.dateTimeBrokerMock.Verify(broker =>
                broker.GetCurrentDateTimeOffset(),
                    Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Insert$safeItemNameSingular$Async(It.IsAny<$safeItemNameSingular$>()),
                    Times.Never);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogError(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$DependencyException))),
                        Times.Once);

            this.dateTimeBrokerMock.VerifyNoOtherCalls();
            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
        }

        [Fact]
        public async Task ShouldThrowServiceExceptionOnAddIfServiceErrorOccursAndLogItAsync()
        {
            // given
            $safeItemNameSingular$ some$safeItemNameSingular$ = CreateRandom$safeItemNameSingular$();
            var serviceException = new Exception();

            var failed$safeItemNameSingular$ServiceException =
                new Failed$safeItemNameSingular$ServiceException(serviceException);

            var expected$safeItemNameSingular$ServiceException =
                new $safeItemNameSingular$ServiceException(failed$safeItemNameSingular$ServiceException);

            this.dateTimeBrokerMock.Setup(broker =>
                broker.GetCurrentDateTimeOffset())
                    .Throws(serviceException);

            // when
            ValueTask<$safeItemNameSingular$> add$safeItemNameSingular$Task =
                this.$parameterSafeItemNameSingular$Service.Add$safeItemNameSingular$Async(some$safeItemNameSingular$);

            $safeItemNameSingular$ServiceException actual$safeItemNameSingular$ServiceException =
                await Assert.ThrowsAsync<$safeItemNameSingular$ServiceException>(
                    add$safeItemNameSingular$Task.AsTask);

            // then
            actual$safeItemNameSingular$ServiceException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$ServiceException);

            this.dateTimeBrokerMock.Verify(broker =>
                broker.GetCurrentDateTimeOffset(),
                    Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Insert$safeItemNameSingular$Async(It.IsAny<$safeItemNameSingular$>()),
                    Times.Never);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogError(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$ServiceException))),
                        Times.Once);

            this.dateTimeBrokerMock.VerifyNoOtherCalls();
            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
        }
    }
}