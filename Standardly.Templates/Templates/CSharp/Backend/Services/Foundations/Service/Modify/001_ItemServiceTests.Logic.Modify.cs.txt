using System;
using System.Threading.Tasks;
using FluentAssertions;
using Force.DeepCloner;
using Moq;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using Xunit;

namespace $unitTestProjectName$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$ServiceTests
    {
        [Fact]
        public async Task ShouldModify$safeItemNameSingular$Async()
        {
            // given
            DateTimeOffset randomDateTimeOffset = GetRandomDateTimeOffset();
            $safeItemNameSingular$ random$safeItemNameSingular$ = CreateRandomModify$safeItemNameSingular$(randomDateTimeOffset);
            $safeItemNameSingular$ input$safeItemNameSingular$ = random$safeItemNameSingular$;
            $safeItemNameSingular$ storage$safeItemNameSingular$ = input$safeItemNameSingular$.DeepClone();
            storage$safeItemNameSingular$.UpdatedDate = random$safeItemNameSingular$.CreatedDate;
            $safeItemNameSingular$ updated$safeItemNameSingular$ = input$safeItemNameSingular$;
            $safeItemNameSingular$ expected$safeItemNameSingular$ = updated$safeItemNameSingular$.DeepClone();
            Guid $parameterSafeItemNameSingular$Id = input$safeItemNameSingular$.Id;

            this.storageBrokerMock.Setup(broker =>
                broker.Update$safeItemNameSingular$Async(input$safeItemNameSingular$))
                    .ReturnsAsync(updated$safeItemNameSingular$);

            // when
            $safeItemNameSingular$ actual$safeItemNameSingular$ =
                await this.$parameterSafeItemNameSingular$Service.Modify$safeItemNameSingular$Async(input$safeItemNameSingular$);

            // then
            actual$safeItemNameSingular$.Should().BeEquivalentTo(expected$safeItemNameSingular$);

            this.storageBrokerMock.Verify(broker =>
                broker.Update$safeItemNameSingular$Async(input$safeItemNameSingular$),
                    Times.Once);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }
    }
}