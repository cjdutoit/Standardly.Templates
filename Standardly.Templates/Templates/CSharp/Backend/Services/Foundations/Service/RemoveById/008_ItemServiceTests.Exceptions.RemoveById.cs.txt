using System;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Moq;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using $rootnamespace$.$models$.$safeItemNamePlural$.Exceptions;
using Xunit;

namespace $unitTestProjectName$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$ServiceTests
    {
        [Fact]
        public async Task ShouldThrowCriticalDependencyExceptionOnRemoveIfSqlErrorOccursAndLogItAsync()
        {
            // given
            $safeItemNameSingular$ random$safeItemNameSingular$ = CreateRandom$safeItemNameSingular$();
            SqlException sqlException = GetSqlException();

            var failed$safeItemNameSingular$StorageException =
                new Failed$safeItemNameSingular$StorageException(sqlException);

            var expected$safeItemNameSingular$DependencyException =
                new $safeItemNameSingular$DependencyException(failed$safeItemNameSingular$StorageException);

            this.storageBrokerMock.Setup(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(random$safeItemNameSingular$.Id))
                    .Throws(sqlException);

            // when
            ValueTask<$safeItemNameSingular$> add$safeItemNameSingular$Task =
                this.$parameterSafeItemNameSingular$Service.Remove$safeItemNameSingular$ByIdAsync(random$safeItemNameSingular$.Id);

            $safeItemNameSingular$DependencyException actual$safeItemNameSingular$DependencyException =
                await Assert.ThrowsAsync<$safeItemNameSingular$DependencyException>(
                    add$safeItemNameSingular$Task.AsTask);

            // then
            actual$safeItemNameSingular$DependencyException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$DependencyException);

            this.storageBrokerMock.Verify(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(random$safeItemNameSingular$.Id),
                    Times.Once);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogCritical(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$DependencyException))),
                        Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Delete$safeItemNameSingular$Async(It.IsAny<$safeItemNameSingular$>()),
                    Times.Never);

            this.dateTimeBrokerMock.Verify(broker =>
                broker.GetCurrentDateTimeOffset(),
                    Times.Never);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }

        [Fact]
        public async Task ShouldThrowDependencyValidationOnRemoveIfDatabaseUpdateConcurrencyErrorOccursAndLogItAsync()
        {
            // given
            Guid some$safeItemNameSingular$Id = Guid.NewGuid();

            var databaseUpdateConcurrencyException =
                new DbUpdateConcurrencyException();

            var locked$safeItemNameSingular$Exception =
                new Locked$safeItemNameSingular$Exception(databaseUpdateConcurrencyException);

            var expected$safeItemNameSingular$DependencyValidationException =
                new $safeItemNameSingular$DependencyValidationException(locked$safeItemNameSingular$Exception);

            this.storageBrokerMock.Setup(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(It.IsAny<Guid>()))
                    .ThrowsAsync(databaseUpdateConcurrencyException);

            // when
            ValueTask<$safeItemNameSingular$> remove$safeItemNameSingular$ByIdTask =
                this.$parameterSafeItemNameSingular$Service.Remove$safeItemNameSingular$ByIdAsync(some$safeItemNameSingular$Id);

            $safeItemNameSingular$DependencyValidationException actual$safeItemNameSingular$DependencyValidationException =
                await Assert.ThrowsAsync<$safeItemNameSingular$DependencyValidationException>(
                    remove$safeItemNameSingular$ByIdTask.AsTask);

            // then
            actual$safeItemNameSingular$DependencyValidationException.Should()
                .BeEquivalentTo(expected$safeItemNameSingular$DependencyValidationException);

            this.storageBrokerMock.Verify(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(It.IsAny<Guid>()),
                    Times.Once);

            this.loggingBrokerMock.Verify(broker =>
                broker.LogError(It.Is(SameExceptionAs(
                    expected$safeItemNameSingular$DependencyValidationException))),
                        Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Delete$safeItemNameSingular$Async(It.IsAny<$safeItemNameSingular$>()),
                    Times.Never);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }
    }
}