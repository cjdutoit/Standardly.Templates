using System;
using System.Threading.Tasks;
using FluentAssertions;
using Force.DeepCloner;
using Moq;
using $rootnamespace$.$models$.$safeItemNamePlural$;
using Xunit;

namespace $unitTestProjectName$.$services$.$foundations$.$safeItemNamePlural$
{
    public partial class $safeItemNameSingular$ServiceTests
    {
        [Fact]
        public async Task ShouldRemove$safeItemNameSingular$ByIdAsync()
        {
            // given
            Guid randomId = Guid.NewGuid();
            Guid input$safeItemNameSingular$Id = randomId;
            $safeItemNameSingular$ random$safeItemNameSingular$ = CreateRandom$safeItemNameSingular$();
            $safeItemNameSingular$ storage$safeItemNameSingular$ = random$safeItemNameSingular$;
            $safeItemNameSingular$ expectedInput$safeItemNameSingular$ = storage$safeItemNameSingular$;
            $safeItemNameSingular$ deleted$safeItemNameSingular$ = expectedInput$safeItemNameSingular$;
            $safeItemNameSingular$ expected$safeItemNameSingular$ = deleted$safeItemNameSingular$.DeepClone();

            this.storageBrokerMock.Setup(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(input$safeItemNameSingular$Id))
                    .ReturnsAsync(storage$safeItemNameSingular$);

            this.storageBrokerMock.Setup(broker =>
                broker.Delete$safeItemNameSingular$Async(expectedInput$safeItemNameSingular$))
                    .ReturnsAsync(deleted$safeItemNameSingular$);

            // when
            $safeItemNameSingular$ actual$safeItemNameSingular$ = await this.$parameterSafeItemNameSingular$Service
                .Remove$safeItemNameSingular$ByIdAsync(input$safeItemNameSingular$Id);

            // then
            actual$safeItemNameSingular$.Should().BeEquivalentTo(expected$safeItemNameSingular$);

            this.storageBrokerMock.Verify(broker =>
                broker.Select$safeItemNameSingular$ByIdAsync(input$safeItemNameSingular$Id),
                    Times.Once);

            this.storageBrokerMock.Verify(broker =>
                broker.Delete$safeItemNameSingular$Async(expectedInput$safeItemNameSingular$),
                    Times.Once);

            this.storageBrokerMock.VerifyNoOtherCalls();
            this.loggingBrokerMock.VerifyNoOtherCalls();
            this.dateTimeBrokerMock.VerifyNoOtherCalls();
        }
    }
}